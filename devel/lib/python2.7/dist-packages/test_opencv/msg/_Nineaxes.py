# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from test_opencv/Nineaxes.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Nineaxes(genpy.Message):
  _md5sum = "2fcf5021dd14ec1f7c21636820e9d8c9"
  _type = "test_opencv/Nineaxes"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 Time
float32 EulerHeading
float32 EulerRoll
float32 AccelerometerX
float32 AccelerometerY
float32 AccelerometerZ
float32 LinearAccelerX
float32 LinearAccelerY
float32 LinearAccelerZ
float32 GravAccelerX
float32 GravAccelerY
float32 GravAccelerZ
float32 EulerPitch

"""
  __slots__ = ['Time','EulerHeading','EulerRoll','AccelerometerX','AccelerometerY','AccelerometerZ','LinearAccelerX','LinearAccelerY','LinearAccelerZ','GravAccelerX','GravAccelerY','GravAccelerZ','EulerPitch']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Time,EulerHeading,EulerRoll,AccelerometerX,AccelerometerY,AccelerometerZ,LinearAccelerX,LinearAccelerY,LinearAccelerZ,GravAccelerX,GravAccelerY,GravAccelerZ,EulerPitch

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Nineaxes, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Time is None:
        self.Time = 0.
      if self.EulerHeading is None:
        self.EulerHeading = 0.
      if self.EulerRoll is None:
        self.EulerRoll = 0.
      if self.AccelerometerX is None:
        self.AccelerometerX = 0.
      if self.AccelerometerY is None:
        self.AccelerometerY = 0.
      if self.AccelerometerZ is None:
        self.AccelerometerZ = 0.
      if self.LinearAccelerX is None:
        self.LinearAccelerX = 0.
      if self.LinearAccelerY is None:
        self.LinearAccelerY = 0.
      if self.LinearAccelerZ is None:
        self.LinearAccelerZ = 0.
      if self.GravAccelerX is None:
        self.GravAccelerX = 0.
      if self.GravAccelerY is None:
        self.GravAccelerY = 0.
      if self.GravAccelerZ is None:
        self.GravAccelerZ = 0.
      if self.EulerPitch is None:
        self.EulerPitch = 0.
    else:
      self.Time = 0.
      self.EulerHeading = 0.
      self.EulerRoll = 0.
      self.AccelerometerX = 0.
      self.AccelerometerY = 0.
      self.AccelerometerZ = 0.
      self.LinearAccelerX = 0.
      self.LinearAccelerY = 0.
      self.LinearAccelerZ = 0.
      self.GravAccelerX = 0.
      self.GravAccelerY = 0.
      self.GravAccelerZ = 0.
      self.EulerPitch = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_13f().pack(_x.Time, _x.EulerHeading, _x.EulerRoll, _x.AccelerometerX, _x.AccelerometerY, _x.AccelerometerZ, _x.LinearAccelerX, _x.LinearAccelerY, _x.LinearAccelerZ, _x.GravAccelerX, _x.GravAccelerY, _x.GravAccelerZ, _x.EulerPitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Time, _x.EulerHeading, _x.EulerRoll, _x.AccelerometerX, _x.AccelerometerY, _x.AccelerometerZ, _x.LinearAccelerX, _x.LinearAccelerY, _x.LinearAccelerZ, _x.GravAccelerX, _x.GravAccelerY, _x.GravAccelerZ, _x.EulerPitch,) = _get_struct_13f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_13f().pack(_x.Time, _x.EulerHeading, _x.EulerRoll, _x.AccelerometerX, _x.AccelerometerY, _x.AccelerometerZ, _x.LinearAccelerX, _x.LinearAccelerY, _x.LinearAccelerZ, _x.GravAccelerX, _x.GravAccelerY, _x.GravAccelerZ, _x.EulerPitch))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.Time, _x.EulerHeading, _x.EulerRoll, _x.AccelerometerX, _x.AccelerometerY, _x.AccelerometerZ, _x.LinearAccelerX, _x.LinearAccelerY, _x.LinearAccelerZ, _x.GravAccelerX, _x.GravAccelerY, _x.GravAccelerZ, _x.EulerPitch,) = _get_struct_13f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13f = None
def _get_struct_13f():
    global _struct_13f
    if _struct_13f is None:
        _struct_13f = struct.Struct("<13f")
    return _struct_13f
